<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image and Prompt Uploader</title>
</head>
<body>
    <h1>Upload an Image and Provide a Prompt</h1>
    <form id="imageForm">
        <label for="image">Select an image:</label>
        <input type="file" id="image" name="image" accept="image/*" required><br><br>
        <label for="prompt">Enter your prompt:</label>
        <input type="text" id="prompt" name="prompt" required><br><br>
        <button type="submit">Upload</button>
    </form>
    <p id="response"></p>

    <script>
        document.getElementById('imageForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const formData = new FormData();
            const imageFile = document.getElementById('image').files[0];
            const prompt = document.getElementById('prompt').value;

            if (imageFile) {
                // Convert the image to a base64 string
                const reader = new FileReader();
                reader.onload = async function (e) {
                    const imageBase64 = e.target.result.split(',')[1]; // Get only the base64 part

                    try {
                        // Send the base64 image and prompt to the Hugging Face API
                        const response = await fetch('https://api-inference.huggingface.co/v1/models/meta-llama/Llama-3.2-11B-Vision-Instruct', {
                            method: 'POST',
                            headers: {
                                'Authorization': 'Bearer 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', // Replace with your actual API key
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                inputs: [
                                    {
                                        type: 'text',
                                        text: prompt
                                    },
                                    {
                                        type: 'image',
                                        image: imageBase64
                                    }
                                ],
                                options: {
                                    max_tokens: 500
                                }
                            })
                        });

                        const result = await response.json();
                        if (result.error) {
                            throw new Error(result.error);
                        }
                        document.getElementById('response').innerText = result.choices[0].text || 'No description returned';
                    } catch (error) {
                        console.error('Error:', error);
                        document.getElementById('response').innerText = 'Error processing the image';
                    }
                };

                reader.readAsDataURL(imageFile);
            }
        });
    </script>
</body>
</html>
